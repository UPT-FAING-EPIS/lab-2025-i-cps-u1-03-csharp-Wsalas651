name: Sonar Continuous Integration & Publish NuGet Package

env:
  DOTNET_VERSION: '8.0'
  SONAR_ORG: '72943816s'
  SONAR_PROJECT: '72943816s_lab-2025-i-cps-u1-03-csharp-wsalas651'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write
  checks: write
  actions: write
  packages: write  # Añadido permiso para paquetes

jobs:
  sonarqube:
    name: Sonarqube Analysis and NuGet Publishing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Importante para SonarQube

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Configurar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Instalar dotnet-sonarscanner y coverlet
        run: |
          dotnet tool install -g dotnet-sonarscanner

      - name: Restaurar dependencias
        run: dotnet restore "Bank/Bank.sln"

      - name: Iniciar análisis SonarQube
        run: dotnet-sonarscanner begin /k:"${{ env.SONAR_PROJECT }}" /o:"${{ env.SONAR_ORG }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="Bank/Bank.WebApi.Tests/TestResults/**/*.opencover.xml" /d:sonar.qualitygate.wait=true /d:sonar.exclusions="**/*.html,**/Bank.WebApi/Program.cs"

      - name: Compilar solución
        run: dotnet build "Bank/Bank.sln" --configuration Release

      - name: Ejecutar tests con cobertura
        run: dotnet test "Bank/Bank.sln" --collect:"XPlat Code Coverage;Format=opencover"

      - name: Verificar cobertura generada
        run: find . -name "coverage.opencover.xml"

      - name: Finalizar análisis SonarQube
        run: dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Configurar NuGet
        run: |
          dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/UPT-FAING-EPIS/index.json"

      - name: Crear paquete NuGet
        run: |
          dotnet pack "Bank/Bank.sln" --configuration Release --output ./packages --include-symbols

      - name: Publicar paquete en GitHub Packages
        run: |
          dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source "github" --skip-duplicate

  release:
    name: Generar Release en GitHub
    needs: sonarqube  # Asegura que se ejecute después de completar el job anterior
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generar tag dinámico
        id: generate_tag
        run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Obtener notas de los commits
        id: changelog
        run: |
          echo "## Cambios en la versión ${{ env.TAG_NAME }}" > release_notes.md
          git log --pretty=format:"- %s" -n 10 >> release_notes.md

      - name: Crear nuevo tag
        run: |
          git tag ${{ env.TAG_NAME }}
          git push origin ${{ env.TAG_NAME }}

      - name: Crear Release en GitHub
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.TAG_NAME }}
          name: "Release ${{ env.TAG_NAME }}"
          bodyFile: "release_notes.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          replacesArtifacts: true
